---
- hosts: 127.0.0.1
  connection: local
  vars_files:
  - openstack_vars.yml
  vars:
    public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    os_cloud: test
    atomic_image_url: https://download.fedoraproject.org/pub/fedora/linux/releases/22/Cloud/x86_64/Images/Fedora-Cloud-Atomic-22-20150521.x86_64.qcow2
    image_name: Fedora 22 Atomic
    key_name: "{{ os_prefix }} Cluster Key"
    security_group_name: "{{ os_prefix }} Cluster Security"
    master_instance_name: "{{ os_prefix }}-master"
    worker_instance_prefix: "{{ os_prefix }}-worker"
    os_vm_bringup_timeout: 1800

  tasks:
    - name: create keys directory
      file: path=./keys state=directory mode=0755

    - name: create SSH host key for master
      command: >
          ssh-keygen -N '' -t rsa -b 2048 -f ./keys/master
          -C "master@{{ os_prefix}}"
      args:
        creates: ./keys/master

    - name: create SSH host key for workers
      command: >
          ssh-keygen -N '' -t rsa -b 2048 -f ./keys/worker
          -C "worker@{{ os_prefix}}"
      args:
        creates: ./keys/worker

    - name: read SSH keys
      set_fact:
        master_private_key: >
          {{ lookup('file', './keys/master') | regex_replace('\n', '\n    ') }}
        master_public_key: "{{ lookup('file', './keys/master.pub') }}"
        worker_private_key: >
          {{ lookup('file', './keys/worker') | regex_replace('\n', '\n    ') }}
        worker_public_key: "{{ lookup('file', './keys/worker.pub') }}"

    - name: create tmp directory
      file: path=./tmp state=directory mode=0755

    - name: download Atomic image
      get_url: dest=./tmp/atomic.qcow2 timeout=3600 url={{ atomic_image_url }}

    - name: register Atomic image
      os_image:
        name: "{{ image_name }}"
        container_format: bare
        disk_format: qcow2
        timeout: 3600
        filename: ./tmp/atomic.qcow2
        cloud: "{{ os_cloud }}"

    - name: register SSH key
      os_keypair:
        name: "{{ key_name }}"
        public_key: "{{ public_key }}"
        cloud: "{{ os_cloud }}"

    - name: register security group
      os_security_group:
        name: "{{ security_group_name }}"
        description: Allows SSH, HTTP(S) and secure Docker
        cloud: "{{ os_cloud }}"

    - name: add public ports to security group
      os_security_group_rule:
        security_group: "{{ security_group_name }}"
        direction: ingress
        protocol: tcp
        remote_ip_prefix: 0.0.0.0/0
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        cloud: "{{ os_cloud }}"
      with_items: [22, 80, 443]

    - name: add internal TCP ports to security group
      os_security_group_rule:
        security_group: "{{ security_group_name }}"
        direction: ingress
        protocol: tcp
        remote_ip_prefix: "{{ internal_net_cidr }}"
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        cloud: "{{ os_cloud }}"
      with_items: [
        2379,  # etcd
        8080,  # Kubernetes API server
      ]

    - name: add internal UDP ports to security group
      os_security_group_rule:
        security_group: "{{ security_group_name }}"
        direction: ingress
        protocol: udp
        remote_ip_prefix: "{{ internal_net_cidr }}"
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        cloud: "{{ os_cloud }}"
      with_items: [
        8285,  # flannel over udp
        8472,  # flannel over vxlan
      ]


    - name: create internal network
      os_network:
        name: "{{ internal_net_name }}"
        admin_state_up: yes
        shared: no
        cloud: "{{ os_cloud }}"

    - name: add subnet to internal network
      os_subnet:
        name: "{{ internal_net_name }}-net"
        network_name: "{{ internal_net_name }}"
        cidr: "{{ internal_net_cidr }}"
        enable_dhcp: yes
        # HACK: The network should not have a gateway IP at all, but that is
        #       not possible with the os_subnet module.
        #       https://github.com/ansible/ansible-modules-core/issues/1880
        #gateway_ip: "0.0.0.0"
        cloud: "{{ os_cloud }}"

    - name: spin up master VM
      os_server:
        name: "{{ master_instance_name }}"
        flavor: "{{ os_master_flavor }}"
        nics:
        - net-name: "{{ os_public_net }}"
        - net-name: "{{ internal_net_name }}"
        image: "{{ image_name }}"
        key_name: "{{ key_name }}"
        security_groups: "{{ security_group_name }}"
        meta:
          system: "{{ os_prefix }}"
          system_role: "{{ os_prefix }}_master"
        # NOTE: Setting config_drive to no causes cloud-init to fail
        #       occasionally, if it doesn't discover the correct route to
        #       the metadata server (169.254.169.254).
        config_drive: yes
        # For cloudinit configuration details, see the Atomic article below.
        # https://access.redhat.com/articles/rhel-atomic-cloud-init-faq
        # Static IP configuration trick from GitHub gist below.
        # https://gist.github.com/psftw/f5a913b949283a5ffd81
        userdata: |
          #cloud-config
          user: {{ os_image_user }}
          password: atomic
          chpasswd:
            list: |
              root:atomic
              {{ os_image_user }}:atomic
            expire: False
          ssh_pwauth: False
          ssh_authorized_keys:
          - {{ public_key }}
          ssh_keys:
            rsa_private: |
              {{ master_private_key }}
            rsa_public: {{ master_public_key }}
        timeout: "{{ os_vm_bringup_timeout }}"
        cloud: "{{ os_cloud }}"
      notify: refresh the dynamic inventory cache

    - name: spin up worker VMs
      os_server:
        name: "{{ worker_instance_prefix }}{{ item }}"
        flavor: "{{ os_worker_flavor }}"
        nics:
        - net-name: "{{ os_public_net }}"
        - net-name: "{{ internal_net_name }}"
        image: "{{ image_name }}"
        key_name: "{{ key_name }}"
        security_groups: "{{ security_group_name }}"
        meta:
          system: "{{ os_prefix }}"
          system_role: "{{ os_prefix }}_worker"
        config_drive: yes
        userdata: |
          #cloud-config
          user: {{ os_image_user }}
          password: atomic
          chpasswd:
            list: |
              root:atomic
              {{ os_image_user }}:atomic
            expire: False
          ssh_pwauth: False
          ssh_authorized_keys:
          - {{ public_key }}
          ssh_keys:
            rsa_private: |
              {{ worker_private_key }}
            rsa_public: {{ worker_public_key }}
        timeout: "{{ os_vm_bringup_timeout }}"
        cloud: "{{ os_cloud }}"
      with_sequence: start=1 end={{ worker_count }}
      notify: refresh the dynamic inventory cache

  handlers:
    - name: refresh the dynamic inventory cache
      command: ./inventory/openstack.py --refresh --list
      changed_when: false
